// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	http "net/http"
	url "net/url"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	_interface "github.com/rmorlok/authproxy/connectors/interface"
	database "github.com/rmorlok/authproxy/database"
	oauth2 "github.com/rmorlok/authproxy/oauth2"
	proxy "github.com/rmorlok/authproxy/proxy"
)

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// GetOAuth2State mocks base method.
func (m *MockFactory) GetOAuth2State(ctx context.Context, actor database.Actor, stateId uuid.UUID) (oauth2.OAuth2Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOAuth2State", ctx, actor, stateId)
	ret0, _ := ret[0].(oauth2.OAuth2Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOAuth2State indicates an expected call of GetOAuth2State.
func (mr *MockFactoryMockRecorder) GetOAuth2State(ctx, actor, stateId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOAuth2State", reflect.TypeOf((*MockFactory)(nil).GetOAuth2State), ctx, actor, stateId)
}

// NewOAuth2 mocks base method.
func (m *MockFactory) NewOAuth2(connection database.Connection, connector _interface.ConnectorVersion) oauth2.OAuth2Connection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewOAuth2", connection, connector)
	ret0, _ := ret[0].(oauth2.OAuth2Connection)
	return ret0
}

// NewOAuth2 indicates an expected call of NewOAuth2.
func (mr *MockFactoryMockRecorder) NewOAuth2(connection, connector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewOAuth2", reflect.TypeOf((*MockFactory)(nil).NewOAuth2), connection, connector)
}

// MockOAuth2Connection is a mock of OAuth2Connection interface.
type MockOAuth2Connection struct {
	ctrl     *gomock.Controller
	recorder *MockOAuth2ConnectionMockRecorder
}

// MockOAuth2ConnectionMockRecorder is the mock recorder for MockOAuth2Connection.
type MockOAuth2ConnectionMockRecorder struct {
	mock *MockOAuth2Connection
}

// NewMockOAuth2Connection creates a new mock instance.
func NewMockOAuth2Connection(ctrl *gomock.Controller) *MockOAuth2Connection {
	mock := &MockOAuth2Connection{ctrl: ctrl}
	mock.recorder = &MockOAuth2ConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuth2Connection) EXPECT() *MockOAuth2ConnectionMockRecorder {
	return m.recorder
}

// CallbackFrom3rdParty mocks base method.
func (m *MockOAuth2Connection) CallbackFrom3rdParty(ctx context.Context, query url.Values) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallbackFrom3rdParty", ctx, query)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallbackFrom3rdParty indicates an expected call of CallbackFrom3rdParty.
func (mr *MockOAuth2ConnectionMockRecorder) CallbackFrom3rdParty(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallbackFrom3rdParty", reflect.TypeOf((*MockOAuth2Connection)(nil).CallbackFrom3rdParty), ctx, query)
}

// CancelSessionAfterAuth mocks base method.
func (m *MockOAuth2Connection) CancelSessionAfterAuth() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelSessionAfterAuth")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CancelSessionAfterAuth indicates an expected call of CancelSessionAfterAuth.
func (mr *MockOAuth2ConnectionMockRecorder) CancelSessionAfterAuth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSessionAfterAuth", reflect.TypeOf((*MockOAuth2Connection)(nil).CancelSessionAfterAuth))
}

// GenerateAuthUrl mocks base method.
func (m *MockOAuth2Connection) GenerateAuthUrl(ctx context.Context, actor database.Actor) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAuthUrl", ctx, actor)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAuthUrl indicates an expected call of GenerateAuthUrl.
func (mr *MockOAuth2ConnectionMockRecorder) GenerateAuthUrl(ctx, actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAuthUrl", reflect.TypeOf((*MockOAuth2Connection)(nil).GenerateAuthUrl), ctx, actor)
}

// ProxyRequest mocks base method.
func (m *MockOAuth2Connection) ProxyRequest(ctx context.Context, req *proxy.ProxyRequest) (*proxy.ProxyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProxyRequest", ctx, req)
	ret0, _ := ret[0].(*proxy.ProxyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyRequest indicates an expected call of ProxyRequest.
func (mr *MockOAuth2ConnectionMockRecorder) ProxyRequest(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyRequest", reflect.TypeOf((*MockOAuth2Connection)(nil).ProxyRequest), ctx, req)
}

// ProxyRequestRaw mocks base method.
func (m *MockOAuth2Connection) ProxyRequestRaw(ctx context.Context, req *proxy.ProxyRequest, w http.ResponseWriter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProxyRequestRaw", ctx, req, w)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProxyRequestRaw indicates an expected call of ProxyRequestRaw.
func (mr *MockOAuth2ConnectionMockRecorder) ProxyRequestRaw(ctx, req, w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyRequestRaw", reflect.TypeOf((*MockOAuth2Connection)(nil).ProxyRequestRaw), ctx, req, w)
}

// RecordCancelSessionAfterAuth mocks base method.
func (m *MockOAuth2Connection) RecordCancelSessionAfterAuth(ctx context.Context, shouldCancel bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordCancelSessionAfterAuth", ctx, shouldCancel)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordCancelSessionAfterAuth indicates an expected call of RecordCancelSessionAfterAuth.
func (mr *MockOAuth2ConnectionMockRecorder) RecordCancelSessionAfterAuth(ctx, shouldCancel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordCancelSessionAfterAuth", reflect.TypeOf((*MockOAuth2Connection)(nil).RecordCancelSessionAfterAuth), ctx, shouldCancel)
}

// RevokeTokens mocks base method.
func (m *MockOAuth2Connection) RevokeTokens(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeTokens", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeTokens indicates an expected call of RevokeTokens.
func (mr *MockOAuth2ConnectionMockRecorder) RevokeTokens(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeTokens", reflect.TypeOf((*MockOAuth2Connection)(nil).RevokeTokens), ctx)
}

// SetStateAndGeneratePublicUrl mocks base method.
func (m *MockOAuth2Connection) SetStateAndGeneratePublicUrl(ctx context.Context, actor database.Actor, returnToUrl string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStateAndGeneratePublicUrl", ctx, actor, returnToUrl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetStateAndGeneratePublicUrl indicates an expected call of SetStateAndGeneratePublicUrl.
func (mr *MockOAuth2ConnectionMockRecorder) SetStateAndGeneratePublicUrl(ctx, actor, returnToUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStateAndGeneratePublicUrl", reflect.TypeOf((*MockOAuth2Connection)(nil).SetStateAndGeneratePublicUrl), ctx, actor, returnToUrl)
}

// SupportsRevokeTokens mocks base method.
func (m *MockOAuth2Connection) SupportsRevokeTokens() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsRevokeTokens")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsRevokeTokens indicates an expected call of SupportsRevokeTokens.
func (mr *MockOAuth2ConnectionMockRecorder) SupportsRevokeTokens() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsRevokeTokens", reflect.TypeOf((*MockOAuth2Connection)(nil).SupportsRevokeTokens))
}
