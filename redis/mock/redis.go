// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	redis "github.com/redis/go-redis/v9"
	redis0 "github.com/rmorlok/authproxy/redis"
)

// MockR is a mock of R interface.
type MockR struct {
	ctrl     *gomock.Controller
	recorder *MockRMockRecorder
}

// MockRMockRecorder is the mock recorder for MockR.
type MockRMockRecorder struct {
	mock *MockR
}

// NewMockR creates a new mock instance.
func NewMockR(ctrl *gomock.Controller) *MockR {
	mock := &MockR{ctrl: ctrl}
	mock.recorder = &MockRMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockR) EXPECT() *MockRMockRecorder {
	return m.recorder
}

// Client mocks base method.
func (m *MockR) Client() *redis.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(*redis.Client)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockRMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockR)(nil).Client))
}

// Close mocks base method.
func (m *MockR) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockR)(nil).Close))
}

// NewMutex mocks base method.
func (m *MockR) NewMutex(key string, options ...redis0.MutexOption) redis0.Mutex {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewMutex", varargs...)
	ret0, _ := ret[0].(redis0.Mutex)
	return ret0
}

// NewMutex indicates an expected call of NewMutex.
func (mr *MockRMockRecorder) NewMutex(key interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMutex", reflect.TypeOf((*MockR)(nil).NewMutex), varargs...)
}

// Ping mocks base method.
func (m *MockR) Ping(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockRMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockR)(nil).Ping), ctx)
}
