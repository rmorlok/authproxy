// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	httpf "github.com/rmorlok/authproxy/httpf"
	request_log "github.com/rmorlok/authproxy/request_log"
	gentleman "gopkg.in/h2non/gentleman.v2"
)

// MockConnectorVersion is a mock of ConnectorVersion interface.
type MockConnectorVersion struct {
	ctrl     *gomock.Controller
	recorder *MockConnectorVersionMockRecorder
}

// MockConnectorVersionMockRecorder is the mock recorder for MockConnectorVersion.
type MockConnectorVersionMockRecorder struct {
	mock *MockConnectorVersion
}

// NewMockConnectorVersion creates a new mock instance.
func NewMockConnectorVersion(ctrl *gomock.Controller) *MockConnectorVersion {
	mock := &MockConnectorVersion{ctrl: ctrl}
	mock.recorder = &MockConnectorVersionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectorVersion) EXPECT() *MockConnectorVersionMockRecorder {
	return m.recorder
}

// GetID mocks base method.
func (m *MockConnectorVersion) GetID() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockConnectorVersionMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockConnectorVersion)(nil).GetID))
}

// GetType mocks base method.
func (m *MockConnectorVersion) GetType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockConnectorVersionMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockConnectorVersion)(nil).GetType))
}

// GetVersion mocks base method.
func (m *MockConnectorVersion) GetVersion() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockConnectorVersionMockRecorder) GetVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockConnectorVersion)(nil).GetVersion))
}

// MockConnection is a mock of Connection interface.
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
}

// MockConnectionMockRecorder is the mock recorder for MockConnection.
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance.
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// GetConnectorId mocks base method.
func (m *MockConnection) GetConnectorId() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectorId")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// GetConnectorId indicates an expected call of GetConnectorId.
func (mr *MockConnectionMockRecorder) GetConnectorId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectorId", reflect.TypeOf((*MockConnection)(nil).GetConnectorId))
}

// GetConnectorVersion mocks base method.
func (m *MockConnection) GetConnectorVersion() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectorVersion")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetConnectorVersion indicates an expected call of GetConnectorVersion.
func (mr *MockConnectionMockRecorder) GetConnectorVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectorVersion", reflect.TypeOf((*MockConnection)(nil).GetConnectorVersion))
}

// GetID mocks base method.
func (m *MockConnection) GetID() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockConnectionMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockConnection)(nil).GetID))
}

// MockF is a mock of F interface.
type MockF struct {
	ctrl     *gomock.Controller
	recorder *MockFMockRecorder
}

// MockFMockRecorder is the mock recorder for MockF.
type MockFMockRecorder struct {
	mock *MockF
}

// NewMockF creates a new mock instance.
func NewMockF(ctrl *gomock.Controller) *MockF {
	mock := &MockF{ctrl: ctrl}
	mock.recorder = &MockFMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockF) EXPECT() *MockFMockRecorder {
	return m.recorder
}

// ForConnection mocks base method.
func (m *MockF) ForConnection(cv httpf.Connection) httpf.F {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForConnection", cv)
	ret0, _ := ret[0].(httpf.F)
	return ret0
}

// ForConnection indicates an expected call of ForConnection.
func (mr *MockFMockRecorder) ForConnection(cv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForConnection", reflect.TypeOf((*MockF)(nil).ForConnection), cv)
}

// ForConnectorVersion mocks base method.
func (m *MockF) ForConnectorVersion(cv httpf.ConnectorVersion) httpf.F {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForConnectorVersion", cv)
	ret0, _ := ret[0].(httpf.F)
	return ret0
}

// ForConnectorVersion indicates an expected call of ForConnectorVersion.
func (mr *MockFMockRecorder) ForConnectorVersion(cv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForConnectorVersion", reflect.TypeOf((*MockF)(nil).ForConnectorVersion), cv)
}

// ForRequestInfo mocks base method.
func (m *MockF) ForRequestInfo(ri request_log.RequestInfo) httpf.F {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForRequestInfo", ri)
	ret0, _ := ret[0].(httpf.F)
	return ret0
}

// ForRequestInfo indicates an expected call of ForRequestInfo.
func (mr *MockFMockRecorder) ForRequestInfo(ri interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForRequestInfo", reflect.TypeOf((*MockF)(nil).ForRequestInfo), ri)
}

// ForRequestType mocks base method.
func (m *MockF) ForRequestType(rt request_log.RequestType) httpf.F {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForRequestType", rt)
	ret0, _ := ret[0].(httpf.F)
	return ret0
}

// ForRequestType indicates an expected call of ForRequestType.
func (mr *MockFMockRecorder) ForRequestType(rt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForRequestType", reflect.TypeOf((*MockF)(nil).ForRequestType), rt)
}

// New mocks base method.
func (m *MockF) New() *gentleman.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New")
	ret0, _ := ret[0].(*gentleman.Client)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockFMockRecorder) New() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockF)(nil).New))
}
