// Code generated by MockGen. DO NOT EDIT.
// Source: inspector_interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	asynq "github.com/hibiken/asynq"
)

// MockInspector is a mock of Inspector interface.
type MockInspector struct {
	ctrl     *gomock.Controller
	recorder *MockInspectorMockRecorder
}

// MockInspectorMockRecorder is the mock recorder for MockInspector.
type MockInspectorMockRecorder struct {
	mock *MockInspector
}

// NewMockInspector creates a new mock instance.
func NewMockInspector(ctrl *gomock.Controller) *MockInspector {
	mock := &MockInspector{ctrl: ctrl}
	mock.recorder = &MockInspectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInspector) EXPECT() *MockInspectorMockRecorder {
	return m.recorder
}

// ArchiveAllAggregatingTasks mocks base method.
func (m *MockInspector) ArchiveAllAggregatingTasks(queue, group string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchiveAllAggregatingTasks", queue, group)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArchiveAllAggregatingTasks indicates an expected call of ArchiveAllAggregatingTasks.
func (mr *MockInspectorMockRecorder) ArchiveAllAggregatingTasks(queue, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveAllAggregatingTasks", reflect.TypeOf((*MockInspector)(nil).ArchiveAllAggregatingTasks), queue, group)
}

// ArchiveAllPendingTasks mocks base method.
func (m *MockInspector) ArchiveAllPendingTasks(queue string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchiveAllPendingTasks", queue)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArchiveAllPendingTasks indicates an expected call of ArchiveAllPendingTasks.
func (mr *MockInspectorMockRecorder) ArchiveAllPendingTasks(queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveAllPendingTasks", reflect.TypeOf((*MockInspector)(nil).ArchiveAllPendingTasks), queue)
}

// ArchiveAllRetryTasks mocks base method.
func (m *MockInspector) ArchiveAllRetryTasks(queue string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchiveAllRetryTasks", queue)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArchiveAllRetryTasks indicates an expected call of ArchiveAllRetryTasks.
func (mr *MockInspectorMockRecorder) ArchiveAllRetryTasks(queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveAllRetryTasks", reflect.TypeOf((*MockInspector)(nil).ArchiveAllRetryTasks), queue)
}

// ArchiveAllScheduledTasks mocks base method.
func (m *MockInspector) ArchiveAllScheduledTasks(queue string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchiveAllScheduledTasks", queue)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArchiveAllScheduledTasks indicates an expected call of ArchiveAllScheduledTasks.
func (mr *MockInspectorMockRecorder) ArchiveAllScheduledTasks(queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveAllScheduledTasks", reflect.TypeOf((*MockInspector)(nil).ArchiveAllScheduledTasks), queue)
}

// ArchiveTask mocks base method.
func (m *MockInspector) ArchiveTask(queue, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchiveTask", queue, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArchiveTask indicates an expected call of ArchiveTask.
func (mr *MockInspectorMockRecorder) ArchiveTask(queue, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveTask", reflect.TypeOf((*MockInspector)(nil).ArchiveTask), queue, id)
}

// CancelProcessing mocks base method.
func (m *MockInspector) CancelProcessing(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelProcessing", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelProcessing indicates an expected call of CancelProcessing.
func (mr *MockInspectorMockRecorder) CancelProcessing(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelProcessing", reflect.TypeOf((*MockInspector)(nil).CancelProcessing), id)
}

// Close mocks base method.
func (m *MockInspector) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockInspectorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockInspector)(nil).Close))
}

// ClusterKeySlot mocks base method.
func (m *MockInspector) ClusterKeySlot(queue string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterKeySlot", queue)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterKeySlot indicates an expected call of ClusterKeySlot.
func (mr *MockInspectorMockRecorder) ClusterKeySlot(queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterKeySlot", reflect.TypeOf((*MockInspector)(nil).ClusterKeySlot), queue)
}

// ClusterNodes mocks base method.
func (m *MockInspector) ClusterNodes(queue string) ([]*asynq.ClusterNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterNodes", queue)
	ret0, _ := ret[0].([]*asynq.ClusterNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterNodes indicates an expected call of ClusterNodes.
func (mr *MockInspectorMockRecorder) ClusterNodes(queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterNodes", reflect.TypeOf((*MockInspector)(nil).ClusterNodes), queue)
}

// DeleteAllAggregatingTasks mocks base method.
func (m *MockInspector) DeleteAllAggregatingTasks(queue, group string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllAggregatingTasks", queue, group)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllAggregatingTasks indicates an expected call of DeleteAllAggregatingTasks.
func (mr *MockInspectorMockRecorder) DeleteAllAggregatingTasks(queue, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllAggregatingTasks", reflect.TypeOf((*MockInspector)(nil).DeleteAllAggregatingTasks), queue, group)
}

// DeleteAllArchivedTasks mocks base method.
func (m *MockInspector) DeleteAllArchivedTasks(queue string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllArchivedTasks", queue)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllArchivedTasks indicates an expected call of DeleteAllArchivedTasks.
func (mr *MockInspectorMockRecorder) DeleteAllArchivedTasks(queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllArchivedTasks", reflect.TypeOf((*MockInspector)(nil).DeleteAllArchivedTasks), queue)
}

// DeleteAllCompletedTasks mocks base method.
func (m *MockInspector) DeleteAllCompletedTasks(queue string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllCompletedTasks", queue)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllCompletedTasks indicates an expected call of DeleteAllCompletedTasks.
func (mr *MockInspectorMockRecorder) DeleteAllCompletedTasks(queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllCompletedTasks", reflect.TypeOf((*MockInspector)(nil).DeleteAllCompletedTasks), queue)
}

// DeleteAllPendingTasks mocks base method.
func (m *MockInspector) DeleteAllPendingTasks(queue string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllPendingTasks", queue)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllPendingTasks indicates an expected call of DeleteAllPendingTasks.
func (mr *MockInspectorMockRecorder) DeleteAllPendingTasks(queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllPendingTasks", reflect.TypeOf((*MockInspector)(nil).DeleteAllPendingTasks), queue)
}

// DeleteAllRetryTasks mocks base method.
func (m *MockInspector) DeleteAllRetryTasks(queue string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllRetryTasks", queue)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllRetryTasks indicates an expected call of DeleteAllRetryTasks.
func (mr *MockInspectorMockRecorder) DeleteAllRetryTasks(queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllRetryTasks", reflect.TypeOf((*MockInspector)(nil).DeleteAllRetryTasks), queue)
}

// DeleteAllScheduledTasks mocks base method.
func (m *MockInspector) DeleteAllScheduledTasks(queue string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllScheduledTasks", queue)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllScheduledTasks indicates an expected call of DeleteAllScheduledTasks.
func (mr *MockInspectorMockRecorder) DeleteAllScheduledTasks(queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllScheduledTasks", reflect.TypeOf((*MockInspector)(nil).DeleteAllScheduledTasks), queue)
}

// DeleteQueue mocks base method.
func (m *MockInspector) DeleteQueue(queue string, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQueue", queue, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQueue indicates an expected call of DeleteQueue.
func (mr *MockInspectorMockRecorder) DeleteQueue(queue, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQueue", reflect.TypeOf((*MockInspector)(nil).DeleteQueue), queue, force)
}

// DeleteTask mocks base method.
func (m *MockInspector) DeleteTask(queue, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", queue, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockInspectorMockRecorder) DeleteTask(queue, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockInspector)(nil).DeleteTask), queue, id)
}

// GetQueueInfo mocks base method.
func (m *MockInspector) GetQueueInfo(queue string) (*asynq.QueueInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueueInfo", queue)
	ret0, _ := ret[0].(*asynq.QueueInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueueInfo indicates an expected call of GetQueueInfo.
func (mr *MockInspectorMockRecorder) GetQueueInfo(queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueInfo", reflect.TypeOf((*MockInspector)(nil).GetQueueInfo), queue)
}

// GetTaskInfo mocks base method.
func (m *MockInspector) GetTaskInfo(queue, id string) (*asynq.TaskInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskInfo", queue, id)
	ret0, _ := ret[0].(*asynq.TaskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskInfo indicates an expected call of GetTaskInfo.
func (mr *MockInspectorMockRecorder) GetTaskInfo(queue, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskInfo", reflect.TypeOf((*MockInspector)(nil).GetTaskInfo), queue, id)
}

// Groups mocks base method.
func (m *MockInspector) Groups(queue string) ([]*asynq.GroupInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Groups", queue)
	ret0, _ := ret[0].([]*asynq.GroupInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Groups indicates an expected call of Groups.
func (mr *MockInspectorMockRecorder) Groups(queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Groups", reflect.TypeOf((*MockInspector)(nil).Groups), queue)
}

// History mocks base method.
func (m *MockInspector) History(queue string, n int) ([]*asynq.DailyStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "History", queue, n)
	ret0, _ := ret[0].([]*asynq.DailyStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// History indicates an expected call of History.
func (mr *MockInspectorMockRecorder) History(queue, n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "History", reflect.TypeOf((*MockInspector)(nil).History), queue, n)
}

// ListActiveTasks mocks base method.
func (m *MockInspector) ListActiveTasks(queue string, opts ...asynq.ListOption) ([]*asynq.TaskInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{queue}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListActiveTasks", varargs...)
	ret0, _ := ret[0].([]*asynq.TaskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActiveTasks indicates an expected call of ListActiveTasks.
func (mr *MockInspectorMockRecorder) ListActiveTasks(queue interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{queue}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActiveTasks", reflect.TypeOf((*MockInspector)(nil).ListActiveTasks), varargs...)
}

// ListAggregatingTasks mocks base method.
func (m *MockInspector) ListAggregatingTasks(queue, group string, opts ...asynq.ListOption) ([]*asynq.TaskInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{queue, group}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAggregatingTasks", varargs...)
	ret0, _ := ret[0].([]*asynq.TaskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAggregatingTasks indicates an expected call of ListAggregatingTasks.
func (mr *MockInspectorMockRecorder) ListAggregatingTasks(queue, group interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{queue, group}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAggregatingTasks", reflect.TypeOf((*MockInspector)(nil).ListAggregatingTasks), varargs...)
}

// ListArchivedTasks mocks base method.
func (m *MockInspector) ListArchivedTasks(queue string, opts ...asynq.ListOption) ([]*asynq.TaskInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{queue}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListArchivedTasks", varargs...)
	ret0, _ := ret[0].([]*asynq.TaskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArchivedTasks indicates an expected call of ListArchivedTasks.
func (mr *MockInspectorMockRecorder) ListArchivedTasks(queue interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{queue}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArchivedTasks", reflect.TypeOf((*MockInspector)(nil).ListArchivedTasks), varargs...)
}

// ListCompletedTasks mocks base method.
func (m *MockInspector) ListCompletedTasks(queue string, opts ...asynq.ListOption) ([]*asynq.TaskInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{queue}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCompletedTasks", varargs...)
	ret0, _ := ret[0].([]*asynq.TaskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCompletedTasks indicates an expected call of ListCompletedTasks.
func (mr *MockInspectorMockRecorder) ListCompletedTasks(queue interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{queue}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCompletedTasks", reflect.TypeOf((*MockInspector)(nil).ListCompletedTasks), varargs...)
}

// ListPendingTasks mocks base method.
func (m *MockInspector) ListPendingTasks(queue string, opts ...asynq.ListOption) ([]*asynq.TaskInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{queue}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPendingTasks", varargs...)
	ret0, _ := ret[0].([]*asynq.TaskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPendingTasks indicates an expected call of ListPendingTasks.
func (mr *MockInspectorMockRecorder) ListPendingTasks(queue interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{queue}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPendingTasks", reflect.TypeOf((*MockInspector)(nil).ListPendingTasks), varargs...)
}

// ListRetryTasks mocks base method.
func (m *MockInspector) ListRetryTasks(queue string, opts ...asynq.ListOption) ([]*asynq.TaskInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{queue}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRetryTasks", varargs...)
	ret0, _ := ret[0].([]*asynq.TaskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRetryTasks indicates an expected call of ListRetryTasks.
func (mr *MockInspectorMockRecorder) ListRetryTasks(queue interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{queue}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRetryTasks", reflect.TypeOf((*MockInspector)(nil).ListRetryTasks), varargs...)
}

// ListScheduledTasks mocks base method.
func (m *MockInspector) ListScheduledTasks(queue string, opts ...asynq.ListOption) ([]*asynq.TaskInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{queue}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListScheduledTasks", varargs...)
	ret0, _ := ret[0].([]*asynq.TaskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListScheduledTasks indicates an expected call of ListScheduledTasks.
func (mr *MockInspectorMockRecorder) ListScheduledTasks(queue interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{queue}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScheduledTasks", reflect.TypeOf((*MockInspector)(nil).ListScheduledTasks), varargs...)
}

// ListSchedulerEnqueueEvents mocks base method.
func (m *MockInspector) ListSchedulerEnqueueEvents(entryID string, opts ...asynq.ListOption) ([]*asynq.SchedulerEnqueueEvent, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{entryID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSchedulerEnqueueEvents", varargs...)
	ret0, _ := ret[0].([]*asynq.SchedulerEnqueueEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchedulerEnqueueEvents indicates an expected call of ListSchedulerEnqueueEvents.
func (mr *MockInspectorMockRecorder) ListSchedulerEnqueueEvents(entryID interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{entryID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchedulerEnqueueEvents", reflect.TypeOf((*MockInspector)(nil).ListSchedulerEnqueueEvents), varargs...)
}

// PauseQueue mocks base method.
func (m *MockInspector) PauseQueue(queue string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseQueue", queue)
	ret0, _ := ret[0].(error)
	return ret0
}

// PauseQueue indicates an expected call of PauseQueue.
func (mr *MockInspectorMockRecorder) PauseQueue(queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseQueue", reflect.TypeOf((*MockInspector)(nil).PauseQueue), queue)
}

// Queues mocks base method.
func (m *MockInspector) Queues() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Queues")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Queues indicates an expected call of Queues.
func (mr *MockInspectorMockRecorder) Queues() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Queues", reflect.TypeOf((*MockInspector)(nil).Queues))
}

// RunAllAggregatingTasks mocks base method.
func (m *MockInspector) RunAllAggregatingTasks(queue, group string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunAllAggregatingTasks", queue, group)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunAllAggregatingTasks indicates an expected call of RunAllAggregatingTasks.
func (mr *MockInspectorMockRecorder) RunAllAggregatingTasks(queue, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunAllAggregatingTasks", reflect.TypeOf((*MockInspector)(nil).RunAllAggregatingTasks), queue, group)
}

// RunAllArchivedTasks mocks base method.
func (m *MockInspector) RunAllArchivedTasks(queue string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunAllArchivedTasks", queue)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunAllArchivedTasks indicates an expected call of RunAllArchivedTasks.
func (mr *MockInspectorMockRecorder) RunAllArchivedTasks(queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunAllArchivedTasks", reflect.TypeOf((*MockInspector)(nil).RunAllArchivedTasks), queue)
}

// RunAllRetryTasks mocks base method.
func (m *MockInspector) RunAllRetryTasks(queue string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunAllRetryTasks", queue)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunAllRetryTasks indicates an expected call of RunAllRetryTasks.
func (mr *MockInspectorMockRecorder) RunAllRetryTasks(queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunAllRetryTasks", reflect.TypeOf((*MockInspector)(nil).RunAllRetryTasks), queue)
}

// RunAllScheduledTasks mocks base method.
func (m *MockInspector) RunAllScheduledTasks(queue string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunAllScheduledTasks", queue)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunAllScheduledTasks indicates an expected call of RunAllScheduledTasks.
func (mr *MockInspectorMockRecorder) RunAllScheduledTasks(queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunAllScheduledTasks", reflect.TypeOf((*MockInspector)(nil).RunAllScheduledTasks), queue)
}

// RunTask mocks base method.
func (m *MockInspector) RunTask(queue, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunTask", queue, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunTask indicates an expected call of RunTask.
func (mr *MockInspectorMockRecorder) RunTask(queue, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTask", reflect.TypeOf((*MockInspector)(nil).RunTask), queue, id)
}

// SchedulerEntries mocks base method.
func (m *MockInspector) SchedulerEntries() ([]*asynq.SchedulerEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SchedulerEntries")
	ret0, _ := ret[0].([]*asynq.SchedulerEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SchedulerEntries indicates an expected call of SchedulerEntries.
func (mr *MockInspectorMockRecorder) SchedulerEntries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SchedulerEntries", reflect.TypeOf((*MockInspector)(nil).SchedulerEntries))
}

// Servers mocks base method.
func (m *MockInspector) Servers() ([]*asynq.ServerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Servers")
	ret0, _ := ret[0].([]*asynq.ServerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Servers indicates an expected call of Servers.
func (mr *MockInspectorMockRecorder) Servers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Servers", reflect.TypeOf((*MockInspector)(nil).Servers))
}

// UnpauseQueue mocks base method.
func (m *MockInspector) UnpauseQueue(queue string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnpauseQueue", queue)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnpauseQueue indicates an expected call of UnpauseQueue.
func (mr *MockInspectorMockRecorder) UnpauseQueue(queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpauseQueue", reflect.TypeOf((*MockInspector)(nil).UnpauseQueue), queue)
}
