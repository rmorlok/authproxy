// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	request_log "github.com/rmorlok/authproxy/request_log"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// RoundTrip mocks base method.
func (m *MockLogger) RoundTrip(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoundTrip", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoundTrip indicates an expected call of RoundTrip.
func (mr *MockLoggerMockRecorder) RoundTrip(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoundTrip", reflect.TypeOf((*MockLogger)(nil).RoundTrip), req)
}

// MockLogRetriever is a mock of LogRetriever interface.
type MockLogRetriever struct {
	ctrl     *gomock.Controller
	recorder *MockLogRetrieverMockRecorder
}

// MockLogRetrieverMockRecorder is the mock recorder for MockLogRetriever.
type MockLogRetrieverMockRecorder struct {
	mock *MockLogRetriever
}

// NewMockLogRetriever creates a new mock instance.
func NewMockLogRetriever(ctrl *gomock.Controller) *MockLogRetriever {
	mock := &MockLogRetriever{ctrl: ctrl}
	mock.recorder = &MockLogRetrieverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogRetriever) EXPECT() *MockLogRetrieverMockRecorder {
	return m.recorder
}

// GetFullLog mocks base method.
func (m *MockLogRetriever) GetFullLog(id uuid.UUID) (*request_log.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFullLog", id)
	ret0, _ := ret[0].(*request_log.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFullLog indicates an expected call of GetFullLog.
func (mr *MockLogRetrieverMockRecorder) GetFullLog(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullLog", reflect.TypeOf((*MockLogRetriever)(nil).GetFullLog), id)
}

// ListRequestsFromCursor mocks base method.
func (m *MockLogRetriever) ListRequestsFromCursor(ctx context.Context, cursor string) (request_log.ListRequestExecutor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRequestsFromCursor", ctx, cursor)
	ret0, _ := ret[0].(request_log.ListRequestExecutor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRequestsFromCursor indicates an expected call of ListRequestsFromCursor.
func (mr *MockLogRetrieverMockRecorder) ListRequestsFromCursor(ctx, cursor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRequestsFromCursor", reflect.TypeOf((*MockLogRetriever)(nil).ListRequestsFromCursor), ctx, cursor)
}

// NewListRequestsBuilder mocks base method.
func (m *MockLogRetriever) NewListRequestsBuilder() request_log.ListRequestBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListRequestsBuilder")
	ret0, _ := ret[0].(request_log.ListRequestBuilder)
	return ret0
}

// NewListRequestsBuilder indicates an expected call of NewListRequestsBuilder.
func (mr *MockLogRetrieverMockRecorder) NewListRequestsBuilder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListRequestsBuilder", reflect.TypeOf((*MockLogRetriever)(nil).NewListRequestsBuilder))
}
